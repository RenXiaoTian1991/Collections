package com.edaoyou.collections.activity;import java.io.File;import java.lang.reflect.Field;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;import org.json.JSONException;import org.json.JSONObject;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.os.PowerManager;import android.support.v4.view.ViewPager;import android.text.TextUtils;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnTouchListener;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.easemob.EMError;import com.easemob.chat.EMChat;import com.easemob.chat.EMChatManager;import com.easemob.chat.EMConversation;import com.easemob.chat.EMMessage;import com.easemob.chat.EMMessage.ChatType;import com.easemob.chat.TextMessageBody;import com.easemob.chat.VoiceMessageBody;import com.easemob.util.VoiceRecorder;import com.edaoyou.collections.ConstantValue;import com.edaoyou.collections.GlobalParams;import com.edaoyou.collections.R;import com.edaoyou.collections.adapter.ChatAdapter;import com.edaoyou.collections.adapter.ExpressionAdapter;import com.edaoyou.collections.adapter.ExpressionPagerAdapter;import com.edaoyou.collections.base.BaseActivity;import com.edaoyou.collections.engine.VoicePlayClickListener;import com.edaoyou.collections.utils.UserUtil;import com.edaoyou.collections.utils.Util;import com.edaoyou.collections.utils.SmileUtils;import com.edaoyou.collections.view.ExpandGridView;import com.etsy.XListView;import com.etsy.XListView.IXListViewListener;public class ChatActivity extends BaseActivity implements OnClickListener {	private RelativeLayout chat_sendmessage_rl; // 键盘EditText外层布局	private LinearLayout press_to_speak_ll; // 按着说话的外层布局	private LinearLayout face_container_ll;// 表情外层布局	private ImageView to_friend_iv; // 去聊天人的主页面	private ImageView mic_iv;// 语音	private ImageView emoticons_normal_iv; // 添加表情按钮默认状态	private ImageView emoticons_checked_iv;// 添加表情按钮选中状态	private TextView chat_name_tv; // 聊天人的名字	private TextView recording_hint_tv;// 手指滑动，取消发送	private Button set_mode_voice_bt; // 语音聊天	private Button set_mode_keyboard_bt;// 键盘文字聊天	private Button chat_send_bt; // 发送按钮	private EditText chat_sendmessage_et;// 聊天输入框	private View recording_container_rl; // 语音外层布局	private ViewPager face_vp; // 表情	private ChatAdapter mChatAdapter;	private XListView chat_XListView;// 聊天列表	private VoiceRecorder voiceRecorder;// 录音	private EMConversation mConversation;// 回话列表	private PowerManager.WakeLock wakeLock;// 保持屏幕恒亮	private NewMessageBroadcastReceiver mNewMessageReceiver;// 新消息的广播	private List<String> reslist;// 表情list	private Drawable[] micImages;// 语音动画	public String playMsgId; // 供adapter调用	private String mLiaoTianSendUrl;// 发送消息的url	private String mUid;	private String mSid;	private String mToUid;// 聊天人的id	private String mEMToUid;// 聊天人的id	private String mToName; // 聊天人的名字	private String mLastFid;	private int mIsMoreData = 1; // 是否有更多数据	private int mRequestCount = 10;// 每次访问的条数	private static final int TYPE_TXT = 1; // 文字	private static final int TYPE_VOICE = 2; // 语音	private int mType = TYPE_TXT;// 当前发送消息的类型	private static final int PULL_FLAG_NEW = 0; // 首次读取	private static final int PULL_FLAG_UP = 1; // 上拉刷新,加载更多	private static final int PULL_FLAG_DOWN = 2; // 下拉刷新	private int mCurrentFlag = PULL_FLAG_NEW;	private int chatType;// 聊天类型 是群聊还是私聊	public static final int CHATTYPE_SINGLE = 1;// 私聊	public static final int CHATTYPE_GROUP = 2;// 群聊	public static final int MSG_STOP_REFRESH = 1; // 停止刷新	private Handler mHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);			switch (msg.what) {			case MSG_STOP_REFRESH:				stopRefresh();				break;			default:// 切换语音动画				mic_iv.setImageDrawable(micImages[msg.what]);				break;			}		}	};	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		initVariable();		registerEMReceivers();// 注册环信的广播		refreshUI();	}	@Override	protected int setContentView() {		return R.layout.activity_chat;	}	@Override	protected void findViews() {		chat_name_tv = (TextView) findViewById(R.id.chat_name_tv);		to_friend_iv = (ImageView) findViewById(R.id.to_friend_iv);		mic_iv = (ImageView) findViewById(R.id.mic_iv);		recording_hint_tv = (TextView) findViewById(R.id.recording_hint_tv);		chat_XListView = (XListView) findViewById(R.id.chat_XListView);		recording_container_rl = findViewById(R.id.recording_container_rl);		set_mode_voice_bt = (Button) findViewById(R.id.set_mode_voice_bt);		set_mode_keyboard_bt = (Button) findViewById(R.id.set_mode_keyboard_bt);		press_to_speak_ll = (LinearLayout) findViewById(R.id.press_to_speak_ll);		chat_sendmessage_rl = (RelativeLayout) findViewById(R.id.chat_sendmessage_rl);		chat_send_bt = (Button) findViewById(R.id.chat_send_bt);		face_vp = (ViewPager) findViewById(R.id.face_vp);		emoticons_normal_iv = (ImageView) findViewById(R.id.emoticons_normal_iv);		emoticons_checked_iv = (ImageView) findViewById(R.id.emoticons_checked_iv);		face_container_ll = (LinearLayout) findViewById(R.id.face_container_ll);		chat_sendmessage_et = (EditText) findViewById(R.id.chat_sendmessage_et); // 输入框	}	@Override	protected void setListensers() {		to_friend_iv.setOnClickListener(this);		chat_send_bt.setOnClickListener(this);		set_mode_voice_bt.setOnClickListener(this);		set_mode_keyboard_bt.setOnClickListener(this);		emoticons_normal_iv.setOnClickListener(this);		emoticons_checked_iv.setOnClickListener(this);		chat_XListView.setPullRefreshEnable(true);		chat_XListView.setPullLoadEnable(false);		chat_XListView.setXListViewListener(new MyIXListViewListener());		chat_XListView.setOnTouchListener(new MyXListViewOnTouchListener());		press_to_speak_ll.setOnTouchListener(new MySpeakOnTouchListener());	}	@Override	protected void onDestroy() {		super.onDestroy();		unregisterEMReceivers();	}	/**	 * 初始化一些变量	 */	private void initVariable() {		mLiaoTianSendUrl = ConstantValue.COMMONURI + ConstantValue.LIAOTIAN_SEND;		mUid = UserUtil.getUserUid(this);		mSid = UserUtil.getUserSid(this);		mToUid = getIntent().getStringExtra(GlobalParams.USER_UID);		mEMToUid = GlobalParams.EM_NAME_PRE + mToUid;		mToName = getIntent().getStringExtra(GlobalParams.USER_NAME);		if (!TextUtils.isEmpty(mToName)) {			chat_name_tv.setText(mToName);		}		// 初始化动画资源文件,用于录制语音时		micImages = new Drawable[] { getResources().getDrawable(R.drawable.record_animate_01),				getResources().getDrawable(R.drawable.record_animate_02), getResources().getDrawable(R.drawable.record_animate_03),				getResources().getDrawable(R.drawable.record_animate_04), getResources().getDrawable(R.drawable.record_animate_05),				getResources().getDrawable(R.drawable.record_animate_06), getResources().getDrawable(R.drawable.record_animate_07),				getResources().getDrawable(R.drawable.record_animate_08), getResources().getDrawable(R.drawable.record_animate_09),				getResources().getDrawable(R.drawable.record_animate_10), getResources().getDrawable(R.drawable.record_animate_11),				getResources().getDrawable(R.drawable.record_animate_12), getResources().getDrawable(R.drawable.record_animate_13),				getResources().getDrawable(R.drawable.record_animate_14), };		voiceRecorder = new VoiceRecorder(mHandler);		// 初始化表情viewpager		reslist = getExpressionRes(35);		List<View> views = new ArrayList<View>();		View gv1 = getGridChildView(1);		View gv2 = getGridChildView(2);		views.add(gv1);		views.add(gv2);		face_vp.setAdapter(new ExpressionPagerAdapter(views));		// 得到回话列表,重置回话列表		mConversation = EMChatManager.getInstance().getConversation(mEMToUid);		mConversation.resetUnreadMsgCount();		wakeLock = ((PowerManager) getSystemService(Context.POWER_SERVICE)).newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, "collections");	}	private List<String> getExpressionRes(int getSum) {		List<String> reslist = new ArrayList<String>();		for (int x = 1; x <= getSum; x++) {			String filename = "ee_" + x;			reslist.add(filename);		}		return reslist;	}	/**	 * 获取表情的gridview的子view	 */	private View getGridChildView(int i) {		View view = View.inflate(this, R.layout.expression_gridview, null);		ExpandGridView gv = (ExpandGridView) view.findViewById(R.id.gridview);		List<String> list = new ArrayList<String>();		if (i == 1) {			List<String> list1 = reslist.subList(0, 20);			list.addAll(list1);		} else if (i == 2) {			list.addAll(reslist.subList(20, reslist.size()));		}		list.add("delete_expression");		final ExpressionAdapter expressionAdapter = new ExpressionAdapter(this, 1, list);		gv.setAdapter(expressionAdapter);		gv.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {				String filename = expressionAdapter.getItem(position);				try {					// 文字输入框可见时，才可输入表情					// 按住说话可见，不让输入表情					if (set_mode_keyboard_bt.getVisibility() != View.VISIBLE) {						if (filename != "delete_expression") { // 不是删除键，显示表情							// 这里用的反射，所以混淆的时候不要混淆SmileUtils这个类							Class clz = Class.forName("com.edaoyou.collections.utils.SmileUtils");							Field field = clz.getField(filename);							chat_sendmessage_et.append(SmileUtils.getSmiledText(ChatActivity.this, (String) field.get(null)));						} else { // 删除文字或者表情							if (!TextUtils.isEmpty(chat_sendmessage_et.getText())) {								int selectionStart = chat_sendmessage_et.getSelectionStart();// 获取光标的位置								if (selectionStart > 0) {									String body = chat_sendmessage_et.getText().toString();									String tempStr = body.substring(0, selectionStart);									int i = tempStr.lastIndexOf("[");// 获取最后一个表情的位置									if (i != -1) {										CharSequence cs = tempStr.substring(i, selectionStart);										if (SmileUtils.containsKey(cs.toString()))											chat_sendmessage_et.getEditableText().delete(i, selectionStart);										else											chat_sendmessage_et.getEditableText().delete(selectionStart - 1, selectionStart);									} else {										chat_sendmessage_et.getEditableText().delete(selectionStart - 1, selectionStart);									}								}							}						}					}				} catch (Exception e) {				}			}		});		return view;	}	/**	 * 注册环信的广播	 */	private void registerEMReceivers() {		mNewMessageReceiver = new NewMessageBroadcastReceiver();// 新消息到来的广播		IntentFilter newMessageintentFilter = new IntentFilter(EMChatManager.getInstance().getNewMessageBroadcastAction());		// 设置广播的优先级别大于Mainacitivity,这样如果消息来的时候正好在chat页面，直接显示消息，而不是提示消息未读		newMessageintentFilter.setPriority(5);		registerReceiver(mNewMessageReceiver, newMessageintentFilter);		// 注册一个ack回执消息的BroadcastReceiver		IntentFilter ackMessageIntentFilter = new IntentFilter(EMChatManager.getInstance().getAckMessageBroadcastAction());		ackMessageIntentFilter.setPriority(5);		registerReceiver(mAckMessageReceiver, ackMessageIntentFilter);		// 注册一个消息送达的BroadcastReceiver		IntentFilter deliveryAckMessageIntentFilter = new IntentFilter(EMChatManager.getInstance().getDeliveryAckMessageBroadcastAction());		deliveryAckMessageIntentFilter.setPriority(5);		registerReceiver(mDeliveryAckMessageReceiver, deliveryAckMessageIntentFilter);		EMChat.getInstance().setAppInited();	}	/**	 * 取消注册环信广播	 */	private void unregisterEMReceivers() {		try {			unregisterReceiver(mNewMessageReceiver);			mNewMessageReceiver = null;		} catch (Exception e) {		}		try {			unregisterReceiver(mAckMessageReceiver);			mAckMessageReceiver = null;		} catch (Exception e) {		}		try {			unregisterReceiver(mDeliveryAckMessageReceiver);			mDeliveryAckMessageReceiver = null;		} catch (Exception e) {		}	}	private void refreshUI() {		if (mChatAdapter == null) {			mChatAdapter = new ChatAdapter(this, mEMToUid, mToName);			chat_XListView.setAdapter(mChatAdapter);		} else {			mChatAdapter.notifyDataSetChanged();		}		chat_XListView.setSelection(chat_XListView.getCount() - 1);	}	/**	 * 停止刷新	 */	private void stopRefresh() {		chat_XListView.stopLoadMore();		chat_XListView.stopRefresh();		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm", Locale.getDefault());		chat_XListView.setRefreshTime(getString(R.string.xlistview_header_last_time, simpleDateFormat.format(new Date(System.currentTimeMillis()))));	}	/**	 * 发送文字消息	 */	private void sendTxt() {		String content = chat_sendmessage_et.getText().toString().trim();		if (TextUtils.isEmpty(content)) {			Toast.makeText(mContext, "请输入聊天内容", Toast.LENGTH_SHORT).show();			return;		}		sendTextToEM(content);		mType = TYPE_TXT;		sendMsgToCollections(content);	}	/**	 * 向环信服务器发送文本消息	 */	private void sendTextToEM(final String content) {		if (content.length() > 0) {			EMMessage message = EMMessage.createSendMessage(EMMessage.Type.TXT);			// 如果是群聊，设置chattype,默认是单聊			if (chatType == CHATTYPE_GROUP) {				message.setChatType(ChatType.GroupChat);			}			TextMessageBody txtBody = new TextMessageBody(content);			// 设置消息body			message.addBody(txtBody);			// 设置要发给谁,用户username或者群聊groupid			message.setReceipt(mEMToUid);			// 把messgage加到conversation中			mConversation.addMessage(message);			// 通知adapter有消息变动，adapter会根据加入的这条message显示消息和调用sdk的发送方法			refreshUI();			chat_sendmessage_et.setText("");		}	}	/**	 * 发送语音	 */	private void sendVoice(String filePath, String fileName, String length, boolean isResend) {		sendVoiceToEM(filePath, fileName, length, isResend);		mType = TYPE_VOICE;		sendMsgToCollections("语音");	}	/**	 * 向环信服务器发送语音	 */	private void sendVoiceToEM(String filePath, String fileName, String length, boolean isResend) {		if (!(new File(filePath).exists())) {			return;		}		try {			final EMMessage message = EMMessage.createSendMessage(EMMessage.Type.VOICE);			// 如果是群聊，设置chattype,默认是单聊			if (chatType == CHATTYPE_GROUP)				message.setChatType(ChatType.GroupChat);			message.setReceipt(mEMToUid);			int len = Integer.parseInt(length);			VoiceMessageBody body = new VoiceMessageBody(new File(filePath), len);			message.addBody(body);			mConversation.addMessage(message);			refreshUI();		} catch (Exception e) {			e.printStackTrace();		}	}	/**	 * 向藏家服务器发送消息	 */	private void sendMsgToCollections(String content) {		JSONObject sendTextjsonObject = getSendMsgJsonObject(content);		initData(mLiaoTianSendUrl, sendTextjsonObject);	}	/**	 * "request":{"fid":"6","to":"19","txt":"哪买的？","online":1,"type":1} 备注 to和谁聊	 * uid和to互斥，不能相同 online 对方是否在线 1在线 0离线(不传) type 1文字 2语音	 * (type为2时，txt传环信返回的语音ID) 自由聊天的意思就是私聊 fid传0	 */	private JSONObject getSendMsgJsonObject(String content) {		JSONObject json = new JSONObject();		JSONObject request = new JSONObject();		try {			// request.put("online", 1);			request.put("fid", 0); // 自由聊天传0			request.put("to", mToUid);			request.put("txt", content);			request.put("type", mType);			json.put("uid", mUid);			json.put("sid", mSid);			json.put("ver", GlobalParams.ver);			json.put("request", request);		} catch (JSONException e) {			e.printStackTrace();		}		return json;	}	@Override	protected void initDataOnSucess(String result, String url, int type) {		super.initDataOnSucess(result, url, type);		if (mLiaoTianSendUrl.equals(url)) {			onLiaoTianSendSucess(result);		}	}	private void onLiaoTianSendSucess(String result) {		try {			JSONObject obj = new JSONObject(result);			JSONObject optJSONObject = obj.optJSONObject("response");			int status = optJSONObject.optInt("status");			if (status == 1) {				chat_sendmessage_et.setText("");			} else {				Toast.makeText(mContext, "发送消息失败", Toast.LENGTH_SHORT).show();			}		} catch (JSONException e) {			e.printStackTrace();		}	}	private void showEmoticons() {		emoticons_normal_iv.setVisibility(View.INVISIBLE);		emoticons_checked_iv.setVisibility(View.VISIBLE);		face_container_ll.setVisibility(View.VISIBLE);		hideKeyboard();	}	private void hideEmoticons() {		emoticons_normal_iv.setVisibility(View.VISIBLE);		emoticons_checked_iv.setVisibility(View.INVISIBLE);		face_container_ll.setVisibility(View.GONE);	}	/**	 * 显示语音相关View	 */	private void showVoice() {		hideKeyboard();		chat_sendmessage_rl.setVisibility(View.GONE);		set_mode_voice_bt.setVisibility(View.GONE);		set_mode_keyboard_bt.setVisibility(View.VISIBLE);		chat_send_bt.setVisibility(View.GONE);		press_to_speak_ll.setVisibility(View.VISIBLE);		hideEmoticons();	}	/**	 * 显示键盘相关View	 */	private void showKeyboard() {		chat_sendmessage_rl.setVisibility(View.VISIBLE);		set_mode_voice_bt.setVisibility(View.VISIBLE);		press_to_speak_ll.setVisibility(View.GONE);		set_mode_keyboard_bt.setVisibility(View.GONE);		chat_sendmessage_et.requestFocus();		chat_send_bt.setVisibility(View.VISIBLE);	}	/**	 * 隐藏软键盘	 */	private void hideKeyboard() {		if (getWindow().getAttributes().softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN) {			if (getCurrentFocus() != null) {				InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);				inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);			}		}	}	/**	 * 覆盖手机返回键	 */	@Override	public void onBackPressed() {		if (face_container_ll.isShown()) {			face_container_ll.setVisibility(View.GONE);			emoticons_normal_iv.setVisibility(View.VISIBLE);			emoticons_checked_iv.setVisibility(View.INVISIBLE);		} else {			super.onBackPressed();		}	}	@Override	public void onClick(View view) {		switch (view.getId()) {		case R.id.chat_send_bt:			sendTxt();			break;		case R.id.set_mode_voice_bt:			showVoice();			break;		case R.id.set_mode_keyboard_bt:			showKeyboard();			break;		case R.id.emoticons_normal_iv:			showEmoticons();			break;		case R.id.emoticons_checked_iv:			hideEmoticons();			break;		default:			break;		}	}	/**	 * 按住说话监听	 */	private class MySpeakOnTouchListener implements OnTouchListener {		@Override		public boolean onTouch(View v, MotionEvent event) {			switch (event.getAction()) {			case MotionEvent.ACTION_DOWN:				if (!Util.isExitsSdcard()) {					Toast.makeText(ChatActivity.this, "发送语音需要sdcard支持", Toast.LENGTH_SHORT).show();					return false;				}				try {					v.setPressed(true);					wakeLock.acquire();					if (VoicePlayClickListener.isPlaying)						VoicePlayClickListener.currentPlayListener.stopPlayVoice();					recording_container_rl.setVisibility(View.VISIBLE);					recording_hint_tv.setText("手指上滑，取消发送");					recording_hint_tv.setBackgroundColor(Color.TRANSPARENT);					voiceRecorder.startRecording(null, mToName, getApplicationContext());				} catch (Exception e) {					e.printStackTrace();					v.setPressed(false);					if (wakeLock.isHeld()) {						wakeLock.release();					}					if (voiceRecorder != null) {						voiceRecorder.discardRecording();					}					recording_container_rl.setVisibility(View.INVISIBLE);					Toast.makeText(ChatActivity.this, R.string.recoding_fail, Toast.LENGTH_SHORT).show();					return false;				}				return true;			case MotionEvent.ACTION_MOVE: {				if (event.getY() < 0) {					recording_hint_tv.setText(getString(R.string.release_to_cancel));					recording_hint_tv.setBackgroundResource(R.drawable.recording_text_hint_bg);				} else {					recording_hint_tv.setText(getString(R.string.move_up_to_cancel));					recording_hint_tv.setBackgroundColor(Color.TRANSPARENT);				}				return true;			}			case MotionEvent.ACTION_UP:				v.setPressed(false);				recording_container_rl.setVisibility(View.INVISIBLE);				if (wakeLock.isHeld())					wakeLock.release();				if (event.getY() < 0) {					// discard the recorded audio.					voiceRecorder.discardRecording();				} else {					// stop recording and send voice file					String st1 = getResources().getString(R.string.Recording_without_permission);					String st2 = getResources().getString(R.string.The_recording_time_is_too_short);					String st3 = getResources().getString(R.string.send_failure_please);					try {						int length = voiceRecorder.stopRecoding();						if (length > 0) {							sendVoice(voiceRecorder.getVoiceFilePath(), voiceRecorder.getVoiceFileName(mToName), Integer.toString(length), false);						} else if (length == EMError.INVALID_FILE) {							Toast.makeText(getApplicationContext(), st1, Toast.LENGTH_SHORT).show();						} else {							Toast.makeText(getApplicationContext(), st2, Toast.LENGTH_SHORT).show();						}					} catch (Exception e) {						e.printStackTrace();						Toast.makeText(ChatActivity.this, st3, Toast.LENGTH_SHORT).show();					}				}				return true;			default:				recording_container_rl.setVisibility(View.INVISIBLE);				if (voiceRecorder != null)					voiceRecorder.discardRecording();				return false;			}		}	}	private class MyIXListViewListener implements IXListViewListener {		@Override		public void onRefresh() {			mCurrentFlag = PULL_FLAG_DOWN;			mIsMoreData = 1;			mHandler.sendEmptyMessageDelayed(MSG_STOP_REFRESH, 1000);		}		@Override		public void onLoadMore() {			mCurrentFlag = PULL_FLAG_UP;		}		@Override		public void onRightSlip() {		}		@Override		public void onLeftSlip() {		}	}	private class MyXListViewOnTouchListener implements OnTouchListener {		@Override		public boolean onTouch(View v, MotionEvent event) {			hideKeyboard();			emoticons_normal_iv.setVisibility(View.VISIBLE);			emoticons_checked_iv.setVisibility(View.INVISIBLE);			face_container_ll.setVisibility(View.GONE);			return false;		}	}		/**	 * 消息广播接收者	 * 	 */	private class NewMessageBroadcastReceiver extends BroadcastReceiver {		@Override		public void onReceive(Context context, Intent intent) {			abortBroadcast();			// 消息类型，文本，图片，语音消息等,这里返回的值为msg.type.ordinal()。			// 所以消息type实际为是enum类型			int msgType = intent.getIntExtra("type", 0);			String username = intent.getStringExtra("from");			String msgid = intent.getStringExtra("msgid");			// 收到这个广播的时候，message已经在db和内存里了，可以通过id获取mesage对象			EMMessage message = EMChatManager.getInstance().getMessage(msgid);			// 如果是群聊消息，获取到group id			if (message.getChatType() == ChatType.GroupChat) {				username = message.getTo();			}			if (!username.equals(mEMToUid)) {				return;			}			refreshUI();		}	}	/**	 * 消息回执BroadcastReceiver	 */	private BroadcastReceiver mAckMessageReceiver = new BroadcastReceiver() {		@Override		public void onReceive(Context context, Intent intent) {			Log.i("abc", "mAckMessageReceiver--onReceive");			abortBroadcast();			String msgid = intent.getStringExtra("msgid");			String from = intent.getStringExtra("from");			EMConversation conversation = EMChatManager.getInstance().getConversation(from);			if (conversation != null) {				// 把message设为已读				EMMessage msg = conversation.getMessage(msgid);				if (msg != null) {					msg.isAcked = true;				}			}			mChatAdapter.notifyDataSetChanged();		}	};	/**	 * 消息送达BroadcastReceiver	 */	private BroadcastReceiver mDeliveryAckMessageReceiver = new BroadcastReceiver() {		@Override		public void onReceive(Context context, Intent intent) {			Log.i("abc", "mDeliveryAckMessageReceiver--onReceive");			abortBroadcast();			String msgid = intent.getStringExtra("msgid");			String from = intent.getStringExtra("from");			EMConversation conversation = EMChatManager.getInstance().getConversation(from);			if (conversation != null) {				// 把message设为已读				EMMessage msg = conversation.getMessage(msgid);				if (msg != null) {					msg.isDelivered = true;				}			}			mChatAdapter.notifyDataSetChanged();		}	};}