package com.edaoyou.collections.base;import org.json.JSONObject;import android.content.Context;import android.os.Bundle;import android.support.v4.app.FragmentActivity;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.LinearLayout.LayoutParams;import com.edaoyou.collections.MyApplication;import com.edaoyou.collections.R;import com.edaoyou.collections.bean.User;import com.edaoyou.collections.engine.DataManager;import com.edaoyou.collections.engine.XUtilsManager;import com.edaoyou.collections.utils.NetUtil;import com.edaoyou.collections.utils.ToastUtils;import com.edaoyou.collections.view.LoadingDialog;import com.lidroid.xutils.BitmapUtils;import com.lidroid.xutils.HttpUtils;import com.lidroid.xutils.exception.HttpException;import com.lidroid.xutils.http.HttpHandler;import com.lidroid.xutils.http.RequestParams;import com.lidroid.xutils.http.ResponseInfo;import com.lidroid.xutils.http.callback.RequestCallBack;import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;public abstract class BaseActivity extends FragmentActivity {	protected MyApplication mMyApplication;	protected Context mContext;	protected HttpUtils mHttpUtils;	protected BitmapUtils mBitmapUtils;	protected HttpHandler<String> mHandler;	protected User mUser;	protected LoadingDialog mLoadingDialog;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.activity_base_layout);		initParent();		findViews();		setListensers();	}	private void initParent() {		mContext = this;		mMyApplication = (MyApplication) mContext.getApplicationContext();		mUser = mMyApplication.getUser();		initXUtils();		mLoadingDialog =  new LoadingDialog(this);		mLoadingDialog.setLoadText("努力加载中...");		LinearLayout subCententView = (LinearLayout) this.findViewById(R.id.base_sub_activty_layout);		LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);		View centerView = View.inflate(mContext, setContentView(), null);		subCententView.addView(centerView, layoutParams);	}	private void initXUtils() {		XUtilsManager xUtilsManager = XUtilsManager.getInstance(mContext);		mHttpUtils = xUtilsManager.getHttpUtils();		mBitmapUtils = xUtilsManager.getBitmapUtils();	}	/**	 * POST方式请求服务器	 */	protected void initData(String url, JSONObject jsonObject) {		initData(url, jsonObject, 0);	}	/**	 * POST方式请求服务器 是不是显示加载数据	 */	protected void initData(final String url, JSONObject jsonObject, final int type,final boolean showLoadingDialog) {		if (!NetUtil.isNetConnect(mContext)) {			ToastUtils.showToast(mContext, "请检查网络");			return;		}		if(showLoadingDialog){			mLoadingDialog.show();		}		DataManager.getInstance().setLoadedDataState(url, false);		RequestParams requestParams = new RequestParams();		requestParams.addBodyParameter("json", jsonObject.toString());		mHandler = mHttpUtils.send(HttpMethod.POST, url, requestParams, new RequestCallBack<String>() {			@Override			public void onStart() {				initDataOnStart(url);			}			@Override			public void onSuccess(ResponseInfo<String> responseInfo) {				try {					if(showLoadingDialog){						mLoadingDialog.hide();					}					String responseData = responseInfo.result;					initDataOnSucess(responseData, url, type);				} catch (Exception e) {					e.printStackTrace();				}			}			@Override			public void onFailure(HttpException error, String msg) {				if(showLoadingDialog){					mLoadingDialog.hide();				}				ToastUtils.showToast(mContext, "获取服务器数据失败");				initDataOnFailure(url);			}		});	}	/**	 * POST方式请求服务器 控制view不重复请求	 */	protected void initData(final String url, JSONObject jsonObject, final int type,final View view) {		if (!NetUtil.isNetConnect(mContext)) {			ToastUtils.showToast(mContext, "请检查网络");			return;		}		view.setClickable(false);		DataManager.getInstance().setLoadedDataState(url, false);		RequestParams requestParams = new RequestParams();		requestParams.addBodyParameter("json", jsonObject.toString());		mLoadingDialog.show();		mHandler = mHttpUtils.send(HttpMethod.POST, url, requestParams, new RequestCallBack<String>() {			@Override			public void onStart() {				initDataOnStart(url);			}			@Override			public void onSuccess(ResponseInfo<String> responseInfo) {				try {					mLoadingDialog.hide();					String responseData = responseInfo.result;					view.setClickable(true);					initDataOnSucess(responseData, url, type);				} catch (Exception e) {					e.printStackTrace();				}			}			@Override			public void onFailure(HttpException error, String msg) {				mLoadingDialog.hide();				ToastUtils.showToast(mContext, "获取服务器数据失败");				initDataOnFailure(url);			}		});	}	/**	 * POST方式请求服务器	 */	protected void initData(final String url, JSONObject jsonObject, final int type) {		if (!NetUtil.isNetConnect(mContext)) {			ToastUtils.showToast(mContext, "请检查网络");			return;		}		DataManager.getInstance().setLoadedDataState(url, false);		RequestParams requestParams = new RequestParams();		requestParams.addBodyParameter("json", jsonObject.toString());		mLoadingDialog.show();		mHandler = mHttpUtils.send(HttpMethod.POST, url, requestParams, new RequestCallBack<String>() {			@Override			public void onStart() {				initDataOnStart(url);			}			@Override			public void onSuccess(ResponseInfo<String> responseInfo) {				try {					mLoadingDialog.hide();					String responseData = responseInfo.result;					initDataOnSucess(responseData, url, type);				} catch (Exception e) {					e.printStackTrace();				}			}			@Override			public void onFailure(HttpException error, String msg) {				mLoadingDialog.hide();				ToastUtils.showToast(mContext, "获取服务器数据失败");				initDataOnFailure(url);			}		});	}	/**	 * GET方式请求服务器	 */	protected void initDataGet(final String url) {		if (!NetUtil.isNetConnect(mContext)) {			ToastUtils.showToast(mContext, "请检查网络");			return;		}		DataManager.getInstance().setLoadedDataState(url, false);		mHandler = mHttpUtils.send(HttpMethod.GET, url, new RequestCallBack<String>() {			@Override			public void onStart() {				initDataOnStart(url);			}			@Override			public void onSuccess(ResponseInfo<String> responseInfo) {				try {					String responseData = responseInfo.result;					initDataOnSucess(responseData, url, 0);				} catch (Exception e) {					e.printStackTrace();				}			}			@Override			public void onFailure(HttpException error, String msg) {				ToastUtils.showToast(mContext, "获取服务器数据失败");				initDataOnFailure(url);			}		});	}	/**	 * 取消请求服务器	 */	protected void cancelLoad() {		if (mHandler != null) {			mHandler.cancel();		}	}	/**	 * 加载子类布局	 */	protected abstract int setContentView();	/**	 * 加载控件	 */	protected abstract void findViews();	/**	 * 设置监听	 */	protected abstract void setListensers();	/**	 * 请求网络之前	 */	protected void initDataOnStart(String url) {	}	/**	 * 请求网络成功	 */	protected void initDataOnSucess(String result, String url, int type) {	}	/**	 * 请求网络失败	 */	protected void initDataOnFailure(String url) {	}}